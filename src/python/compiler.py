from .tokenizer import Tokenizer
from .parser import Parser, BinOp, Int, TreeNode
from dataclasses import dataclass
from enum import StrEnum, auto
from typing import Any, Generator


class BytecodeType(StrEnum):
    BINOP = auto()
    PUSH = auto()


@dataclass
class Bytecode:
    type: BytecodeType
    value: Any = None


class Compiler:
    def __init__(self, tree: TreeNode) -> None:
        self.tree = tree

    def compile(self) -> Generator[Bytecode, None, None]:
        yield from self._compile_node(self.tree)

    def _compile_node(self, node: TreeNode) -> Generator[Bytecode, None, None]:
        if isinstance(node, Int):
            yield Bytecode(BytecodeType.PUSH, node.value)
        elif isinstance(node, BinOp):
            yield from self._compile_node(node.left)
            yield from self._compile_node(node.right)
            yield Bytecode(BytecodeType.BINOP, node.op)


if __name__ == "__main__":
    import sys

    code = sys.argv[1]
    tokens = list(Tokenizer(code))
    tree = Parser(tokens).parse()
    bytecode = list(Compiler(tree).compile())

    print("Generated Bytecode:")
    for bc in bytecode:
        print(bc)
